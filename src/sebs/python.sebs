# Scalable Extendable Build System
# Copyright (c) 2009 Kenton Varda and contributors.  All rights reserved.
# Portions copyright Google, Inc.
# http://code.google.com/p/sebs
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of the SEBS project nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# TODO(kenton):  Factor out common dependency handling code.

class Library(sebs.Rule):
  argument_spec = sebs.ArgumentSpec(srcs = [sebs.Artifact])

  def _expand(self, args):
    self.srcs = args.srcs
    self.outputs = []

class Binary(sebs.Rule):
  # TODO(kenton):  Rename "name" to "output", make it optional -- if not
  #   given, use label and output only to tmp.
  argument_spec = sebs.ArgumentSpec(name = str, main = str,
                                    srcs = [sebs.Artifact],
                                    deps = ([sebs.Rule], []))

  def _expand(self, args):
    transitive_sources = list(args.srcs)
    for dep in args.deps:
      if not isinstance(dep, Library):
        raise DefinitionError("Dependency is not a Python library: %s" % dep)
      dep.expand_once()
      transitive_sources.extend(dep.srcs)

    make_bin = self.context.source_artifact("make_py_binary.py")
    action = self.context.action(self, "par")
    output = self.context.output_artifact("bin", args.name, action)
    path = [ sebs.SubprocessCommand.DirectoryToken("src"), ":",
             sebs.SubprocessCommand.DirectoryToken("tmp") ]
    action.set_command(
      sebs.SubprocessCommand(action,
        [make_bin, "-m", args.main, "-o", output, "-p", path] +
        transitive_sources))
    self.binary = output
    self.outputs = [output]

class Test(sebs.Test):
  argument_spec = sebs.ArgumentSpec(main = sebs.Artifact,
                                    deps = ([sebs.Rule], []))

  def _expand(self, args):
    implicit = []
    for dep in args.deps:
      if not isinstance(dep, Library):
        raise DefinitionError("Dependency is not a Python library: %s" % dep)
      dep.expand_once()
      implicit.extend(dep.srcs)
    action = self.context.action(self, "test", args.main.filename)
    output = self.context.derived_artifact(args.main, "_output.txt", action)
    result = self.context.derived_artifact(args.main, "_result", action,
                                           inmem=True)

    action.set_command(sebs.SubprocessCommand(action, ["python", args.main],
                                              implicit = implicit,
                                              capture_stdout = output,
                                              capture_stderr = output,
                                              capture_exit_status = result))

    self.test_result_artifact = result
    self.test_output_artifact = output
    self.outputs = []
