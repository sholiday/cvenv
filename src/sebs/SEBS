# Scalable Extendable Build System
# Copyright (c) 2009 Kenton Varda and contributors.  All rights reserved.
# Portions copyright Google, Inc.
# http://code.google.com/p/sebs
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of the SEBS project nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# The standard builtin "sebs" conflicts with a target defined in this file.
_sebs = sebs

python = _sebs.import_("python.sebs")

sebs_lib = python.Library(
  srcs = [ "__init__.py",
           "builder.py",
           "command.py",
           "configuration.py",
           "console.py",
           "core.py",
           "filesystem.py",
           "helpers.py",
           "loader.py",
           "runner.py" ])

sebs = python.Binary(
  name = "sebs",
  main = "sebs.main",
  srcs = [ "main.py" ],
  deps = [ sebs_lib ])

command_test = python.Test(main = "command_test.py", deps = [sebs_lib])
core_test = python.Test(main = "core_test.py", deps = [sebs_lib])
filesystem_test = python.Test(main = "filesystem_test.py", deps = [sebs_lib])
helpers_test = python.Test(main = "helpers_test.py", deps = [sebs_lib])
loader_test = python.Test(main = "loader_test.py", deps = [sebs_lib])
builder_test = python.Test(main = "builder_test.py", deps = [sebs_lib])

# TODO(kenton):  Move elsewhere.
class ShellTest(_sebs.Test):
  argument_spec = _sebs.ArgumentSpec(src = _sebs.Artifact,
                                     data = ([_sebs.Artifact], []))

  def _expand(self, args):
    runfiles_name = self.label + ".runfiles"
    runfiles_dir = "/".join(["tmp", self.context.directory, runfiles_name])

    runfiles_action = self.context.action(self, "setup")
    runfiles_middleman = self.context.memory_artifact(
        runfiles_name, runfiles_action)
    runfiles_action.set_command(
        _sebs.MirrorCommand(args.data, runfiles_dir, runfiles_middleman))

    action = self.context.action(self, "test")
    src_name = self.context.local_filename(args.src)

    output = self.context.intermediate_artifact(self.label + "_output.txt",
                                                action)
    result = self.context.memory_artifact(self.label + "_result", action)

    action.set_command(
        _sebs.SubprocessCommand(action, [args.src],
                                implicit = [runfiles_middleman] + args.data,
                                capture_stdout = output,
                                capture_stderr = output,
                                capture_exit_status = result,
                                working_dir = runfiles_dir))

    self.test_result_artifact = result
    self.test_output_artifact = output
    self.outputs = []

cpp_test = ShellTest(src = "cpp_test/cpp_test.sh",
                     data = [sebs, "cpp.sebs", "python.sebs",
                                   "make_py_binary.py", "run_test.py",
                                   "__init__.py", "cpp_test/*"])
