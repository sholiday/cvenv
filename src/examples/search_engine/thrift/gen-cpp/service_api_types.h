/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef service_api_TYPES_H
#define service_api_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace examples { namespace searchengine {

typedef struct _SearchRequest__isset {
  _SearchRequest__isset() : key(false), url(false) {}
  bool key;
  bool url;
} _SearchRequest__isset;

class SearchRequest {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  SearchRequest() : key(""), url("") {
  }

  virtual ~SearchRequest() throw() {}

  std::string key;
  std::string url;

  _SearchRequest__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_url(const std::string& val) {
    url = val;
  }

  bool operator == (const SearchRequest & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const SearchRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SearchResult__isset {
  _SearchResult__isset() : key(false), url(false), score(false) {}
  bool key;
  bool url;
  bool score;
} _SearchResult__isset;

class SearchResult {
 public:

  static const char* ascii_fingerprint; // = "AD85F51ADB3273FFDB452ABB0A91574B";
  static const uint8_t binary_fingerprint[16]; // = {0xAD,0x85,0xF5,0x1A,0xDB,0x32,0x73,0xFF,0xDB,0x45,0x2A,0xBB,0x0A,0x91,0x57,0x4B};

  SearchResult() : key(""), url(""), score(0) {
  }

  virtual ~SearchResult() throw() {}

  std::string key;
  std::string url;
  double score;

  _SearchResult__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_url(const std::string& val) {
    url = val;
  }

  void __set_score(const double val) {
    score = val;
  }

  bool operator == (const SearchResult & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(score == rhs.score))
      return false;
    return true;
  }
  bool operator != (const SearchResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SearchResponse__isset {
  _SearchResponse__isset() : results(false), success(false), message(false) {}
  bool results;
  bool success;
  bool message;
} _SearchResponse__isset;

class SearchResponse {
 public:

  static const char* ascii_fingerprint; // = "B244965316139FC0FC8F934ED54A36DE";
  static const uint8_t binary_fingerprint[16]; // = {0xB2,0x44,0x96,0x53,0x16,0x13,0x9F,0xC0,0xFC,0x8F,0x93,0x4E,0xD5,0x4A,0x36,0xDE};

  SearchResponse() : success(0), message("") {
  }

  virtual ~SearchResponse() throw() {}

  std::vector<SearchResult>  results;
  bool success;
  std::string message;

  _SearchResponse__isset __isset;

  void __set_results(const std::vector<SearchResult> & val) {
    results = val;
  }

  void __set_success(const bool val) {
    success = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const SearchResponse & rhs) const
  {
    if (!(results == rhs.results))
      return false;
    if (!(success == rhs.success))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const SearchResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
