/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef SearchEngineService_H
#define SearchEngineService_H

#include <TProcessor.h>
#include "service_api_types.h"

namespace examples { namespace searchengine {

class SearchEngineServiceIf {
 public:
  virtual ~SearchEngineServiceIf() {}
  virtual void search(SearchResponse& _return, const SearchRequest& request) = 0;
  virtual int32_t ping() = 0;
};

class SearchEngineServiceNull : virtual public SearchEngineServiceIf {
 public:
  virtual ~SearchEngineServiceNull() {}
  void search(SearchResponse& /* _return */, const SearchRequest& /* request */) {
    return;
  }
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _SearchEngineService_search_args__isset {
  _SearchEngineService_search_args__isset() : request(false) {}
  bool request;
} _SearchEngineService_search_args__isset;

class SearchEngineService_search_args {
 public:

  SearchEngineService_search_args() {
  }

  virtual ~SearchEngineService_search_args() throw() {}

  SearchRequest request;

  _SearchEngineService_search_args__isset __isset;

  void __set_request(const SearchRequest& val) {
    request = val;
  }

  bool operator == (const SearchEngineService_search_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const SearchEngineService_search_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchEngineService_search_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SearchEngineService_search_pargs {
 public:


  virtual ~SearchEngineService_search_pargs() throw() {}

  const SearchRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SearchEngineService_search_result__isset {
  _SearchEngineService_search_result__isset() : success(false) {}
  bool success;
} _SearchEngineService_search_result__isset;

class SearchEngineService_search_result {
 public:

  SearchEngineService_search_result() {
  }

  virtual ~SearchEngineService_search_result() throw() {}

  SearchResponse success;

  _SearchEngineService_search_result__isset __isset;

  void __set_success(const SearchResponse& val) {
    success = val;
  }

  bool operator == (const SearchEngineService_search_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SearchEngineService_search_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchEngineService_search_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SearchEngineService_search_presult__isset {
  _SearchEngineService_search_presult__isset() : success(false) {}
  bool success;
} _SearchEngineService_search_presult__isset;

class SearchEngineService_search_presult {
 public:


  virtual ~SearchEngineService_search_presult() throw() {}

  SearchResponse* success;

  _SearchEngineService_search_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SearchEngineService_ping_args {
 public:

  SearchEngineService_ping_args() {
  }

  virtual ~SearchEngineService_ping_args() throw() {}


  bool operator == (const SearchEngineService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SearchEngineService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchEngineService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SearchEngineService_ping_pargs {
 public:


  virtual ~SearchEngineService_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SearchEngineService_ping_result__isset {
  _SearchEngineService_ping_result__isset() : success(false) {}
  bool success;
} _SearchEngineService_ping_result__isset;

class SearchEngineService_ping_result {
 public:

  SearchEngineService_ping_result() : success(0) {
  }

  virtual ~SearchEngineService_ping_result() throw() {}

  int32_t success;

  _SearchEngineService_ping_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const SearchEngineService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SearchEngineService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchEngineService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SearchEngineService_ping_presult__isset {
  _SearchEngineService_ping_presult__isset() : success(false) {}
  bool success;
} _SearchEngineService_ping_presult__isset;

class SearchEngineService_ping_presult {
 public:


  virtual ~SearchEngineService_ping_presult() throw() {}

  int32_t* success;

  _SearchEngineService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SearchEngineServiceClient : virtual public SearchEngineServiceIf {
 public:
  SearchEngineServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SearchEngineServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void search(SearchResponse& _return, const SearchRequest& request);
  void send_search(const SearchRequest& request);
  void recv_search(SearchResponse& _return);
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SearchEngineServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<SearchEngineServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (SearchEngineServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_search(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SearchEngineServiceProcessor(boost::shared_ptr<SearchEngineServiceIf> iface) :
    iface_(iface) {
    processMap_["search"] = &SearchEngineServiceProcessor::process_search;
    processMap_["ping"] = &SearchEngineServiceProcessor::process_ping;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~SearchEngineServiceProcessor() {}
};

class SearchEngineServiceMultiface : virtual public SearchEngineServiceIf {
 public:
  SearchEngineServiceMultiface(std::vector<boost::shared_ptr<SearchEngineServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SearchEngineServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SearchEngineServiceIf> > ifaces_;
  SearchEngineServiceMultiface() {}
  void add(boost::shared_ptr<SearchEngineServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void search(SearchResponse& _return, const SearchRequest& request) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->search(_return, request);
        return;
      } else {
        ifaces_[i]->search(_return, request);
      }
    }
  }

  int32_t ping() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->ping();
      } else {
        ifaces_[i]->ping();
      }
    }
  }

};

}} // namespace

#endif
